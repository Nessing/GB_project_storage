1) Как организовать клиент-серверное взаимодействие?
На сервере будет использоваться сервис исполнения ExecutorService, для управления потоками.
Взаимодействие между клиентом и сервером будет происходит через служебные команды ("/add"; "/remove"; "registration"...),
которые будут привязанны к кнопкам в GUI.

2) Как и в каком виде передавать файлы?
Через сериализацию. JSON, используя фреймворк Jackson

3) Как пересылать большие файлы?
Разделять файл на оптимальный размер (если файл больше 1000 мб, тогда разделять по 1000 мб), 
отправлять и собирать в конечной точке

4) Как пересылать служебные команды?
При выборе нужного файла на GUI, в строку, для отправки запроса на сервер, будет добавлен путь.
После выбора необходимого действия, посредством нажатия на кнопку в GUI на клиенте, 
служебная команда будет добавляться в начало строки запроса. Сервер будет считывать начальную команду
и выполнять выбранное действие. 
Пример: (String command = "/add test/myText.txt")
Сервер считывает команду "/add" и путь с именем файла, который необходимо добавить "test/myText.txt"

5) Что хранить в базе данных? 
** Пока не до конца решил точно, что еще будет в БД **
В БД будут храниться аккаунты (логины с паролем)

6) Как передавать структуру каталогов/файлов?
** Будет еще дополняться **
На каждом аккаунте будут свои каталоги по имени аккаунта, с подкаталогами.
Пример: Есть пользователь с логином "user_1". Создается папка на сервере "user_1" и пока пользователь
находиться на сервере под своим ником, все действия будут происходить внутри его каталога, а при различных
манипуляций с файлами/каталогами будет добавляться к началу пути файла название корневого каталога пользователя
Пример: (String command = "/add test/myText.txt")
"/add" - команда на сервер о действии; "test/myText.txt" - подкаталог "test" с файлом "myText.txt", в него будет
добавляться название корневого каталога "user_1". Конечный запрос будет выглядить так: ("/add user_1/test/myText.txt")

7) Какую библиотеку использовать для сетевого взаимодействия: java.io, java.nio, Netty?
** По выбранной библиотеке отпишусь позже. Но скорей всего буду использовать Netty, так как озвученных плюсов на лекции было больше **